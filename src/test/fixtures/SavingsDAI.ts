
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  PXE,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import SavingsDAIContractArtifactJson from '../../../aztec-contracts/target/SavingsDAI.json' assert { type: 'json' };
export const SavingsDAIContractArtifact = SavingsDAIContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract SavingsDAI;
 */
export class SavingsDAIContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, SavingsDAIContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, SavingsDAIContract.artifact, wallet) as Promise<SavingsDAIContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(pxe: PXE, ) {
    return new DeployMethod<SavingsDAIContract>(Point.ZERO, pxe, SavingsDAIContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(pxe: PXE, publicKey: PublicKey, ) {
    return new DeployMethod<SavingsDAIContract>(publicKey, pxe, SavingsDAIContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return SavingsDAIContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _approve_bridge_and_exit_input_asset_to_L1(token: struct, token_bridge: struct, amount: field) */
    _approve_bridge_and_exit_input_asset_to_L1: ((token: AztecAddressLike, token_bridge: AztecAddressLike, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _assert_token_is_same(token: struct, token_bridge: struct) */
    _assert_token_is_same: ((token: AztecAddressLike, token_bridge: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** deposit_private(input_asset: struct, input_asset_bridge: struct, input_amount: field, output_asset_bridge: struct, nonce_for_unshield_approval: field, secret_hash_for_redeeming_minted_notes: field, secret_hash_for_L1_to_l2_message: field, deadline_for_L1_to_l2_message: field, canceller_for_L1_to_L2_message: struct, caller_on_L1: struct) */
    deposit_private: ((input_asset: AztecAddressLike, input_asset_bridge: AztecAddressLike, input_amount: FieldLike, output_asset_bridge: AztecAddressLike, nonce_for_unshield_approval: FieldLike, secret_hash_for_redeeming_minted_notes: FieldLike, secret_hash_for_L1_to_l2_message: FieldLike, deadline_for_L1_to_l2_message: FieldLike, canceller_for_L1_to_L2_message: EthAddressLike, caller_on_L1: EthAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** deposit_public(sender: struct, input_asset_bridge: struct, input_amount: field, output_asset_bridge: struct, nonce_for_transfer_approval: field, recipient: struct, secret_hash_for_L1_to_l2_message: field, deadline_for_L1_to_l2_message: field, canceller_for_L1_to_L2_message: struct, caller_on_L1: struct, nonce_for_swap_approval: field) */
    deposit_public: ((sender: AztecAddressLike, input_asset_bridge: AztecAddressLike, input_amount: FieldLike, output_asset_bridge: AztecAddressLike, nonce_for_transfer_approval: FieldLike, recipient: AztecAddressLike, secret_hash_for_L1_to_l2_message: FieldLike, deadline_for_L1_to_l2_message: FieldLike, canceller_for_L1_to_L2_message: EthAddressLike, caller_on_L1: EthAddressLike, nonce_for_swap_approval: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_valid_public(message_hash: field) */
    is_valid_public: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** nonce_for_burn_approval() */
    nonce_for_burn_approval: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
