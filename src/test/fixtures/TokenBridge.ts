
/* Autogenerated file, do not edit! */

/* eslint-disable */
import { AztecAddress, CompleteAddress, Contract, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, EthAddress, FieldLike, AztecAddressLike, EthAddressLike, Wallet } from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { PXE, PublicKey } from '@aztec/types';
import { ContractArtifact } from '@aztec/foundation/abi';
import TokenBridgeContractArtifactJson from '../../../aztec-contracts/token_bridge/target/TokenBridge.json' assert { type: 'json' };
export const TokenBridgeContractArtifact = TokenBridgeContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract TokenBridge;
 */
export class TokenBridgeContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, TokenBridgeContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, TokenBridgeContract.artifact, wallet) as Promise<TokenBridgeContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(pxe: PXE, token: AztecAddressLike) {
    return new DeployMethod<TokenBridgeContract>(Point.ZERO, pxe, TokenBridgeContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(pxe: PXE, publicKey: PublicKey, token: AztecAddressLike) {
    return new DeployMethod<TokenBridgeContract>(publicKey, pxe, TokenBridgeContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return TokenBridgeContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _assert_token_is_same(token: field) */
    _assert_token_is_same: ((token: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _call_mint_on_token(amount: field, secret_hash: field) */
    _call_mint_on_token: ((amount: FieldLike, secret_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** _initialize(token: struct) */
    _initialize: ((token: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** claim_private(secret_hash_for_redeeming_minted_notes: field, amount: field, canceller: struct, msg_key: field, secret_for_L1_to_L2_message_consumption: field) */
    claim_private: ((secret_hash_for_redeeming_minted_notes: FieldLike, amount: FieldLike, canceller: EthAddressLike, msg_key: FieldLike, secret_for_L1_to_L2_message_consumption: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** claim_public(to: struct, amount: field, canceller: struct, msg_key: field, secret: field) */
    claim_public: ((to: AztecAddressLike, amount: FieldLike, canceller: EthAddressLike, msg_key: FieldLike, secret: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** exit_to_l1_private(token: struct, recipient: struct, amount: field, callerOnL1: struct, nonce: field) */
    exit_to_l1_private: ((token: AztecAddressLike, recipient: EthAddressLike, amount: FieldLike, callerOnL1: EthAddressLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** exit_to_l1_public(recipient: struct, amount: field, callerOnL1: struct, nonce: field) */
    exit_to_l1_public: ((recipient: EthAddressLike, amount: FieldLike, callerOnL1: EthAddressLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_token() */
    get_token: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** token() */
    token: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
